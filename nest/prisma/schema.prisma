// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Staff {
    id        String   @id @default(uuid())
    username  String   @unique
    password  String
    createdAt DateTime @default(now()) @map("created_at")

    staffStatus     StaffStatus?
    staffCategories StaffCategory[]
    messages        Message[]
    chatRoomUser    ChatRoomUser[]

    @@map("staffs")
}

model StaffStatus {
    staffId            String   @id @map("staff_id")
    clientId           String?  @map("client_id") // client_id is the socket id
    maxActiveChats     Int      @default(10) @map("max_active_chats")
    currentActiveChats Int      @default(0) @map("current_active_chats")
    status             Int      @default(0)
    updatedAt          DateTime @updatedAt @map("updated_at")

    staffs Staff @relation(fields: [staffId], onDelete: Cascade, references: [id])

    @@map("staffStatus")
}

model Category {
    id          Int    @id @default(autoincrement())
    name        String
    description String

    staffCategories StaffCategory[]
    chatRooms       ChatRoom[]

    @@map("categories")
}

model StaffCategory {
    staffId    String @map("staff_id")
    categoryId Int    @map("category_id")

    staff    Staff    @relation(fields: [staffId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])

    @@id([staffId, categoryId])
    @@map("staffCategory")
}

model ChatRoom {
    id          Int       @id @default(autoincrement())
    happinessId String    @map("happiness_id")
    threadId    String?   @map("thread_id")
    categoryId  Int?      @map("category_id")
    language    String?
    status      Int       @default(0)
    rating      Int?
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime? @updatedAt @map("updated_at")

    messages      Message[]
    categories    Category?      @relation(fields: [categoryId], references: [id])
    chatRoomUsers ChatRoomUser[]

    @@map("chatRooms")
}

model ChatRoomUser {
    chatRoomId Int      @map("chat_room_id")
    staffId    String   @map("staff_id")
    createdAt  DateTime @default(now()) @map("created_at")

    chatRooms ChatRoom @relation(fields: [chatRoomId], references: [id])
    staffs    Staff?   @relation(fields: [staffId], references: [id])

    @@id([chatRoomId, staffId])
    @@map("chatRoomUsers")
}

model Message {
    id          Int       @id @default(autoincrement())
    content     String
    staffId     String?   @map("staff_id")
    chatRoomId  Int       @map("chat_room_id")
    happinessId String?   @map("happiness_id")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime? @updatedAt @map("updated_at")

    staffs    Staff?   @relation(fields: [staffId], references: [id])
    chatRooms ChatRoom @relation(fields: [chatRoomId], references: [id])

    @@map("messages")
}
